/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface FilesquashModal {
      'labelText': string;
      'localFilesTitle': string;
      'multiple': boolean;
      'selectedFilePlaceholder': string;
      'selectedFilesText': string;
      'selectedPdfPlaceholder': string;
      'selectedVideoPlaceholder': string;
      'toggleModal': () => void;
      'token': string;
      'uploadButtonText': string;
    }

    interface FilesquashWidget {
      'buttonText': string;
      'labelText': string;
      'localFilesTitle': string;
      'multiple': boolean;
      'selectedFilePlaceholder': string;
      'selectedFilesText': string;
      'selectedPdfPlaceholder': string;
      'selectedVideoPlaceholder': string;
      'token': string;
      'uploadButtonText': string;
    }
  }


    interface HTMLFilesquashModalElement extends StencilComponents.FilesquashModal, HTMLStencilElement {}

    var HTMLFilesquashModalElement: {
      prototype: HTMLFilesquashModalElement;
      new (): HTMLFilesquashModalElement;
    };
    

    interface HTMLFilesquashWidgetElement extends StencilComponents.FilesquashWidget, HTMLStencilElement {}

    var HTMLFilesquashWidgetElement: {
      prototype: HTMLFilesquashWidgetElement;
      new (): HTMLFilesquashWidgetElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'filesquash-modal': JSXElements.FilesquashModalAttributes;
    'filesquash-widget': JSXElements.FilesquashWidgetAttributes;
    }
  }

  namespace JSXElements {

    export interface FilesquashModalAttributes extends HTMLAttributes {
      'labelText'?: string;
      'localFilesTitle'?: string;
      'multiple'?: boolean;
      'onUploadCompleted'?: (event: CustomEvent) => void;
      'selectedFilePlaceholder'?: string;
      'selectedFilesText'?: string;
      'selectedPdfPlaceholder'?: string;
      'selectedVideoPlaceholder'?: string;
      'token'?: string;
      'uploadButtonText'?: string;
    }

    export interface FilesquashWidgetAttributes extends HTMLAttributes {
      'buttonText'?: string;
      'labelText'?: string;
      'localFilesTitle'?: string;
      'multiple'?: boolean;
      'onUploadCompleted'?: (event: CustomEvent) => void;
      'selectedFilePlaceholder'?: string;
      'selectedFilesText'?: string;
      'selectedPdfPlaceholder'?: string;
      'selectedVideoPlaceholder'?: string;
      'token'?: string;
      'uploadButtonText'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'filesquash-modal': HTMLFilesquashModalElement
    'filesquash-widget': HTMLFilesquashWidgetElement
  }

  interface ElementTagNameMap {
    'filesquash-modal': HTMLFilesquashModalElement;
    'filesquash-widget': HTMLFilesquashWidgetElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;