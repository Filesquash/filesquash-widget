/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface FilesquashImg {
      'alt': string;
      'filters': string;
      'progressive': boolean;
      'reload': () => void;
      'size': string;
      'src': string;
    }
  }

  interface HTMLFilesquashImgElement extends StencilComponents.FilesquashImg, HTMLStencilElement {}

  var HTMLFilesquashImgElement: {
    prototype: HTMLFilesquashImgElement;
    new (): HTMLFilesquashImgElement;
  };
  interface HTMLElementTagNameMap {
    'filesquash-img': HTMLFilesquashImgElement;
  }
  interface ElementTagNameMap {
    'filesquash-img': HTMLFilesquashImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'filesquash-img': JSXElements.FilesquashImgAttributes;
    }
  }
  namespace JSXElements {
    export interface FilesquashImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'filters'?: string;
      'onImageError'?: (event: CustomEvent) => void;
      'onImageLoad'?: (event: CustomEvent) => void;
      'progressive'?: boolean;
      'size'?: string;
      'src'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FilesquashModal {
      'labelText': string;
      'localFilesTitle': string;
      'multiple': boolean;
      'selectedFilePlaceholder': string;
      'selectedFilesText': string;
      'selectedPdfPlaceholder': string;
      'selectedVideoPlaceholder': string;
      'toggleModal': () => void;
      'uploadButtonText': string;
    }
  }

  interface HTMLFilesquashModalElement extends StencilComponents.FilesquashModal, HTMLStencilElement {}

  var HTMLFilesquashModalElement: {
    prototype: HTMLFilesquashModalElement;
    new (): HTMLFilesquashModalElement;
  };
  interface HTMLElementTagNameMap {
    'filesquash-modal': HTMLFilesquashModalElement;
  }
  interface ElementTagNameMap {
    'filesquash-modal': HTMLFilesquashModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'filesquash-modal': JSXElements.FilesquashModalAttributes;
    }
  }
  namespace JSXElements {
    export interface FilesquashModalAttributes extends HTMLAttributes {
      'labelText'?: string;
      'localFilesTitle'?: string;
      'multiple'?: boolean;
      'onUploadCompleted'?: (event: CustomEvent) => void;
      'selectedFilePlaceholder'?: string;
      'selectedFilesText'?: string;
      'selectedPdfPlaceholder'?: string;
      'selectedVideoPlaceholder'?: string;
      'uploadButtonText'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FilesquashWidget {
      'buttonText': string;
      'labelText': string;
      'localFilesTitle': string;
      'multiple': boolean;
      'selectedFilePlaceholder': string;
      'selectedFilesText': string;
      'selectedPdfPlaceholder': string;
      'selectedVideoPlaceholder': string;
      'uploadButtonText': string;
    }
  }

  interface HTMLFilesquashWidgetElement extends StencilComponents.FilesquashWidget, HTMLStencilElement {}

  var HTMLFilesquashWidgetElement: {
    prototype: HTMLFilesquashWidgetElement;
    new (): HTMLFilesquashWidgetElement;
  };
  interface HTMLElementTagNameMap {
    'filesquash-widget': HTMLFilesquashWidgetElement;
  }
  interface ElementTagNameMap {
    'filesquash-widget': HTMLFilesquashWidgetElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'filesquash-widget': JSXElements.FilesquashWidgetAttributes;
    }
  }
  namespace JSXElements {
    export interface FilesquashWidgetAttributes extends HTMLAttributes {
      'buttonText'?: string;
      'labelText'?: string;
      'localFilesTitle'?: string;
      'multiple'?: boolean;
      'onUploadCompleted'?: (event: CustomEvent) => void;
      'selectedFilePlaceholder'?: string;
      'selectedFilesText'?: string;
      'selectedPdfPlaceholder'?: string;
      'selectedVideoPlaceholder'?: string;
      'uploadButtonText'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;